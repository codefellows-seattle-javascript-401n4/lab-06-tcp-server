
lab 7

npm i mocha expect superagent --save-dev
.send establish the body
.set

test.js
const expect = require('expect');
const request = require('superagent');

start and stop server insifde our test if you don't stop then it would just hang

server start when we require

_server.js = underscore meant to be internally used = internal api  = start and stop server within our test code

? is the query parameter


'use strict';

const net = require("net");
const port = 3000;
const server = net.createServer();

let socketPool = [];

server.on('connection', (socket) => {
  socket.username = `User ${Math.random()}`;
  socketPool = [...socketPool, socket]; //add the socket to the clientpool
  //clientPool = [...clientPool, socket];

  console.log("socket connected!!!!!!");

  //we can send a string, a buffer, or even data
  socket.write("Welcome to Thao Talk\n\n");

  //respond to a "data received" event, by writing whatever was typed in to all socket
  socket.on('data', (buffer) => {
    let data = buffer.toString();

    //use /nickname <something> to change my name
    if(text.startsWith("/nickname")) {
      socket.username = text.trim().split(" ").slice(1).join(" ");
    }

    if(text.startsWith("/dm")){
      //get the username
      //send that socket your text
    }

    if(text.startsWith("/quit")) {
      //delete your socket from the clientpool
    }

    //broadcast the message
    console.log(socket.username, ":", text);

    socketPool.forEach(function(connection) {
      connection.write(text);
    });
  })
});

//socket.on('error');
//socket.on('close');
//socket.on('disconnect');



have chat server take commands from client
web server

post


return promises
//add is a function that returns a promise
//do this when you are done
let add = function() {
  return new Promise(resolve, reject) => {
    resolve(a + b);
    reject("bad input");//reject would fall in the catch
  });
}


add(2,3)
  .then((result) => {

  })
  .catch((error) => {

  });

add(2,3)
//result becomes the parameter for .then()
  .then ((answer) => console.log(answer))
  .catch((error) => console.log("ERR", error))
new Promise() =>



add(2,3)
.then(doThis)//results from do this will become input
.then(doThat)
.then(doSomethingElse)
.catch((error) => console.log("ERR", error))//catch also return a promise

let arrayOfPromises = [
  add(),
  subtract(),
  multiply()
]


//return multiple results/inputs in order
arrayOfPromises.all(a,s,m) => {
  system.render();
});
